{"version":3,"sources":["assets/UWCSA_Color.png","components/NavItem.js","components/NavBar.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","NavItem","props","label","path","react_default","a","createElement","NavLink","to","className","activeClassName","NavPageRoutes","Upcoming","About","Events","Team","Sponsors","Contact","NavBar","navItems","Object","keys","map","idx","components_NavItem","key","src","logo","alt","App","BrowserRouter","components_NavBar","Switch","Route","component","Redirect","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mFAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,oRCmBzBC,SAfC,SACdC,GACG,IAEDC,EAEED,EAFFC,MACAC,EACEF,EADFE,KAGF,OACEC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAASC,GAAIL,EAAMM,UAAU,mBAAmBC,gBAAgB,YAC9DN,EAAAC,EAAAC,cAAA,QAAMG,UAAU,WAAWP,uBCT3BS,SAAgB,CACpBC,SAAY,YACZC,MAAS,SACTC,OAAU,UACVC,KAAQ,QACRC,SAAY,YACZC,QAAW,aAoBEC,EAjBA,WACb,IAAMC,EAAWC,OAAOC,KAAKV,GAAeW,IAAI,SAACpB,EAAOqB,GACtD,OAAOnB,EAAAC,EAAAC,cAACkB,EAAD,CAASC,IAAKF,EAAKrB,MAAOA,EAAOC,KAAMQ,EAAcT,OAG9D,OACEE,EAAAC,EAAAC,cAAA,OAAKG,UAAU,aACbL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,aAAaiB,IAAKC,IAAMC,IAAI,eAC3CxB,EAAAC,EAAAC,cAAA,OAAKG,UAAU,wBACbL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,kBACZU,MCELP,SAAW,WACf,OACER,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,qBAKAO,EAAQ,WACZ,OACET,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,qBAKAQ,EAAS,WACb,OACEV,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,sBAKAS,EAAO,WACX,OACEX,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,oBAKAU,EAAW,WACf,OACEZ,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,wBAKAW,EAAU,WACd,OACEb,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,uBAuCSuB,EAtGH,WACV,OACEzB,EAAAC,EAAAC,cAACwB,EAAA,EAAD,KACE1B,EAAAC,EAAAC,cAAA,OAAKG,UAAU,OACbL,EAAAC,EAAAC,cAACyB,EAAD,MAEA3B,EAAAC,EAAAC,cAAC0B,EAAA,EAAD,KACE5B,EAAAC,EAAAC,cAAC2B,EAAA,EAAD,CAAO9B,KAAK,YAAY+B,UAAWtB,IACnCR,EAAAC,EAAAC,cAAC2B,EAAA,EAAD,CAAO9B,KAAK,SAAS+B,UAAWrB,IAChCT,EAAAC,EAAAC,cAAC2B,EAAA,EAAD,CAAO9B,KAAK,UAAU+B,UAAWpB,IACjCV,EAAAC,EAAAC,cAAC2B,EAAA,EAAD,CAAO9B,KAAK,QAAQ+B,UAAWnB,IAC/BX,EAAAC,EAAAC,cAAC2B,EAAA,EAAD,CAAO9B,KAAK,YAAY+B,UAAWlB,IACnCZ,EAAAC,EAAAC,cAAC2B,EAAA,EAAD,CAAO9B,KAAK,WAAW+B,UAAWjB,IAClCb,EAAAC,EAAAC,cAAC6B,EAAA,EAAD,CAAU3B,GAAG,kBCPH4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOtC,EAAAC,EAAAC,cAACqC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.e76bb3db.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/UWCSA_Color.98d0036d.png\";","import React from \"react\";\r\nimport { NavLink } from 'react-router-dom';\r\nimport \"./../styles/NavItem.scss\";\r\n\r\nconst NavItem = (\r\n  props,\r\n) => {\r\n  const {\r\n    label,\r\n    path,\r\n  } = props;\r\n\r\n  return (\r\n    <NavLink to={path} className=\"navItemContainer\" activeClassName=\"selected\">\r\n      <span className=\"navItem\">{label}</span>\r\n    </NavLink>\r\n  );\r\n}\r\n\r\nexport default NavItem;","import React from \"react\";\r\nimport NavItem from \"./NavItem\";\r\nimport logo from './../assets/UWCSA_Color.png';\r\nimport \"./../styles/NavBar.scss\";\r\n\r\nconst NavPageRoutes = {\r\n  \"Upcoming\": \"/upcoming\",\r\n  \"About\": \"/about\",\r\n  \"Events\": \"/events\",\r\n  \"Team\": \"/team\",\r\n  \"Sponsors\": \"/sponsors\",\r\n  \"Contact\": \"/contact\",\r\n}\r\n\r\nconst NavBar = () => {\r\n  const navItems = Object.keys(NavPageRoutes).map((label, idx) => {\r\n    return <NavItem key={idx} label={label} path={NavPageRoutes[label]} />\r\n  })\r\n\r\n  return (\r\n    <div className=\"navBarDiv\">\r\n      <img className=\"navLogoImg\" src={logo} alt=\"UWCSA-Logo\"/>\r\n      <div className=\"navItemsContainerDiv\">\r\n        <div className=\"navItemsRowDiv\">\r\n          {navItems}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default NavBar;","import React from \"react\";\nimport { BrowserRouter as Router, Route, Redirect, Switch } from \"react-router-dom\";\nimport NavBar from \"./components/NavBar\";\nimport \"./styles/App.scss\";\n\n// NOTE: Upcoming will be our home page\nconst App = () => {\n  return (\n    <Router>\n      <div className=\"app\">\n        <NavBar />\n\n        <Switch>\n          <Route path=\"/upcoming\" component={Upcoming} />\n          <Route path=\"/about\" component={About} />\n          <Route path=\"/events\" component={Events} />\n          <Route path=\"/team\" component={Team} />\n          <Route path=\"/sponsors\" component={Sponsors} />\n          <Route path=\"/contact\" component={Contact} />\n          <Redirect to=\"/upcoming\" />\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nconst Upcoming = () => {\n  return (\n    <div>\n      <h2>Home</h2>\n    </div>\n  );\n}\n\nconst About = () => {\n  return (\n    <div>\n      <h2>About</h2>\n    </div>\n  );\n}\n\nconst Events = () => {\n  return (\n    <div>\n      <h2>Events</h2>\n    </div>\n  );\n}\n\nconst Team = () => {\n  return (\n    <div>\n      <h2>Team</h2>\n    </div>\n  );\n}\n\nconst Sponsors = () => {\n  return (\n    <div>\n      <h2>Sponsors</h2>\n    </div>\n  );\n}\n\nconst Contact = () => {\n  return (\n    <div>\n      <h2>Contact</h2>\n    </div>\n  );\n}\n\n// const Topics = ({ match }) => {\n//   return (\n//     <div>\n//       <h2>Topics</h2>\n//       <ul>\n//         <li>\n//           <Link to={`${match.url}/rendering`}>Rendering with React</Link>\n//         </li>\n//         <li>\n//           <Link to={`${match.url}/components`}>Components</Link>\n//         </li>\n//         <li>\n//           <Link to={`${match.url}/props-v-state`}>Props v. State</Link>\n//         </li>\n//       </ul>\n\n//       <Route path={`${match.path}/:topicId`} component={Topic} />\n//       <Route\n//         exact\n//         path={match.path}\n//         render={() => <h3>Please select a topic.</h3>}\n//       />\n//     </div>\n//   );\n// }\n\n// const Topic = ({ match }) => {\n//   return (\n//     <div>\n//       <h3>{match.params.topicId}</h3>\n//     </div>\n//   );\n// }\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}